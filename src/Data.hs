{-# OPTIONS  #-}


-- parser (data) produced by Happy (GLR) Version 1.19.12

module Data where



import qualified Math.Combinat.Trees.Binary as Tree
import qualified Control.Monad.State as S
import Basic
import qualified Data.Array as Happy_Data_Array
import qualified Data.Bits as Bits
import Control.Applicative(Applicative(..))
import Control.Monad (ap)



{-# LINE 1 "templates/GLR_Base.hs" #-}
{- GLR_Base.lhs
   $Id: GLR_Base.lhs,v 1.4 2004/12/04 15:01:37 paulcc Exp $
-}

-- Basic defs required for compiling the data portion of the parser

-- We're creating Int-indexed graphs

type ForestId  = (Int,Int,GSymbol)


-- Actions for the GLR machine

data GLRAction = Shift Int [Reduction]
               | Reduce [Reduction]
               | Accept
               | Error

---
-- A Reduction (s,n,f) removes the top n node-ids, creates a new branch from these
-- and labels the branch with the given symbol s. Additionally, the branch may
-- hold some semantic value.

type Reduction = (GSymbol,Int, [ForestId] -> Branch)


---
-- A Branch holds the semantic result plus node ids of children

data Branch
 = Branch {b_sem :: GSem, b_nodes :: [ForestId]}
   deriving Show

instance Eq Branch where
        b1 == b2 = b_nodes b1 == b_nodes b2



-------------------------------------------------------------------------------
-- Utilities for decoding

---
-- Tree decode unpacks the forest into a list of results
--  - this is ok for small examples, but inefficient for very large examples
--  - the data file contains further instances
--  - see documentation for further information
--  - "Decode_Result" is a synonym used to insert the monad type constr (or not)

class TreeDecode a where
        decode_b :: (ForestId -> [Branch]) -> Branch -> [Decode_Result a]

decode :: TreeDecode a => (ForestId -> [Branch]) -> ForestId -> [Decode_Result a]
decode f i@(_,_,HappyTok t)
  = decode_b f (Branch (SemTok t) [])
decode f i
  = [ d | b <- f i, d <- decode_b f b ]

---- generated by Happy, since it means expansion of synonym (not ok in H-98)
--instance TreeDecode UserDefTok where
--      decode_b f (Branch (SemTok t) []) = [happy_return t]

---
-- this is used to multiply the ambiguous possibilities from children

--cross_fn :: [a -> b] -> [a] -> [b]
--actual type will depend on monad in use.
--happy_ap defined by parser generator
cross_fn fs as = [ f `happy_ap` a | f <- fs, a <- as]

---
-- Label decoding unpacks from the Semantic wrapper type
--  - this allows arbitrary values (within the limits of the compiler settings)
--    to be recovered from nodes in the tree.
--  - again, more instances are written in the data file
--  - see documentation for further information

class LabelDecode a where
        unpack :: GSem -> a

---- generated by Happy, since it means expansion of synonym (not ok in H-98)
--instance LabelDecode UserDefTok where
--      unpack (SemTok t) = t




{-# LINE 105 "src/Data.hs"#-}

parseError :: [Card] -> a
parseError _ = error "Parse error"

{-# LINE 110 "src/Data.hs"#-}

data GSymbol = HappyEOF | HappyTok {-!Int-} (Card) | G_S 
 | G_Pred 
 | G_Noun 
 | G_Adverb 
 | G_Num 
 | G_Op 
   deriving (Show,Eq,Ord)

data GSem
 = NoSem
 | SemTok (Card)
 | Sem_0 (Tree.Tree Card -> Tree.Tree Card -> Tree.Tree Card) 
 | Sem_1 (Tree.Tree Card -> Tree.Tree Card) 
 | Sem_2 (Tree.Tree Card) 
 | Sem_3 (Tree.Tree Card -> Tree.Tree Card -> Tree.Tree Card -> Tree.Tree Card) 
instance Show GSem where
  show Sem_0{} = "Sem_0"
  show Sem_1{} = "Sem_1"
  show Sem_2{} = "Sem_2"
  show Sem_3{} = "Sem_3"


semfn_0_0 ns@(happy_var_1:happy_var_2:happy_rest) =  Branch (Sem_0 (\happy_var_1 -> \happy_var_2 -> Tree.Node N [happy_var_1, happy_var_2])) ns
semfn_1_0 ns@(happy_var_1:happy_var_2:happy_rest) =  Branch (Sem_1 (\happy_var_2 -> Tree.Node N [Tree.Node Trash [], happy_var_2])) ns
semfn_2_0 ns@(happy_rest) =  Branch (Sem_2 (Tree.Node F [])) ns
semfn_2_1 ns@(happy_rest) =  Branch (Sem_2 (Tree.Node One [])) ns
semfn_2_2 ns@(happy_rest) =  Branch (Sem_2 (Tree.Node Two [])) ns
semfn_2_3 ns@(happy_rest) =  Branch (Sem_2 (Tree.Node (:+:) [])) ns
semfn_3_0 ns@(happy_var_1:happy_var_2:happy_var_3:happy_rest) =  Branch (Sem_3 (\happy_var_1 -> \happy_var_2 -> \happy_var_3 -> Tree.Node N [happy_var_2, happy_var_1, happy_var_3])) ns


type Decode_Result a = a
happy_ap = ($)
happy_return = id
instance TreeDecode (Tree.Tree Card) where 
  decode_b f (Branch (Sem_0 s) (b_0:b_1:_)) = (cross_fn (cross_fn [s] $ decode f b_0) $ decode f b_1)
  decode_b f (Branch (Sem_1 s) (b_0:b_1:_)) = (cross_fn [s] $ decode f b_1)
  decode_b f (Branch (Sem_2 s) (_)) = [s]
  decode_b f (Branch (Sem_3 s) (b_0:b_1:b_2:_)) = (cross_fn (cross_fn (cross_fn [s] $ decode f b_0) $ decode f b_1) $ decode f b_2)



type UserDefTok = Card
instance TreeDecode (Card) where
  decode_b f (Branch (SemTok t) []) = [happy_return t]
instance LabelDecode (Card) where
  unpack (SemTok t) = t


action 0 ( HappyTok (F) ) = Shift 3 []
action 0 ( HappyTok (Trash) ) = Shift 6 []
action 0 ( HappyTok (Adv) ) = Shift 7 []
action 1 ( HappyTok (F) ) = Shift 3 []
action 2 ( HappyTok (X) ) = Shift 13 []
action 3 ( HappyTok (X) ) = Reduce [red_4]
action 4 ( HappyEOF ) = Accept
action 5 ( HappyTok (F) ) = Shift 3 []
action 5 ( HappyTok (Trash) ) = Shift 6 []
action 5 ( HappyTok (Adv) ) = Shift 7 []
action 6 ( HappyTok (One) ) = Shift 9 []
action 6 ( HappyTok (Two) ) = Shift 10 []
action 7 ( HappyTok (F) ) = Reduce [red_6]
action 7 ( HappyTok (Trash) ) = Reduce [red_6]
action 7 ( HappyTok (Adv) ) = Reduce [red_6]
action 8 ( HappyTok ((:+:)) ) = Shift 15 []
action 8 ( HappyEOF ) = Reduce [red_3]
action 9 ( HappyTok ((:+:)) ) = Reduce [red_7]
action 9 ( HappyEOF ) = Reduce [red_7]
action 10 ( HappyTok ((:+:)) ) = Reduce [red_8]
action 10 ( HappyEOF ) = Reduce [red_8]
action 11 ( HappyEOF ) = Reduce [red_2]
action 12 ( HappyEOF ) = Reduce [red_1]
action 13 ( HappyEOF ) = Reduce [red_5]
action 14 ( HappyTok (One) ) = Shift 9 []
action 14 ( HappyTok (Two) ) = Shift 10 []
action 15 ( HappyTok (One) ) = Reduce [red_10]
action 15 ( HappyTok (Two) ) = Reduce [red_10]
action 16 ( HappyTok ((:+:)) ) = Shift 15 [red_9]
action 16 ( HappyEOF ) = Reduce [red_9]
action _ _ = Error
red_1 = (G_S,2 :: Int,semfn_0_0)
red_2 = (G_S,2 :: Int,semfn_0_0)
red_3 = (G_S,2 :: Int,semfn_1_0)
red_4 = (G_Pred,1 :: Int,semfn_2_0)
red_5 = (G_Noun,1 :: Int,semfn_2_0)
red_6 = (G_Adverb,1 :: Int,semfn_2_0)
red_7 = (G_Num,1 :: Int,semfn_2_1)
red_8 = (G_Num,1 :: Int,semfn_2_2)
red_9 = (G_Num,3 :: Int,semfn_3_0)
red_10 = (G_Op,1 :: Int,semfn_2_3)
goto 0 G_S = 4
goto 0 G_Pred = 2
goto 0 G_Adverb = 5

goto 1 G_Pred = 2

goto 2 G_Noun = 12

goto 5 G_S = 11
goto 5 G_Pred = 2
goto 5 G_Adverb = 5

goto 6 G_Num = 8

goto 8 G_Op = 14

goto 14 G_Num = 16

goto 16 G_Op = 14

goto _ _ = -1
