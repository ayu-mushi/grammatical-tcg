{-# OPTIONS  #-}


-- parser (data) produced by Happy (GLR) Version 1.19.12

module Data where



import qualified Control.Monad.State as S
import Basic
import qualified Data.Array as Happy_Data_Array
import qualified Data.Bits as Bits
import Control.Applicative(Applicative(..))
import Control.Monad (ap)



{-# LINE 1 "templates/GLR_Base.hs" #-}
{- GLR_Base.lhs
   $Id: GLR_Base.lhs,v 1.4 2004/12/04 15:01:37 paulcc Exp $
-}

-- Basic defs required for compiling the data portion of the parser

-- We're creating Int-indexed graphs

type ForestId  = (Int,Int,GSymbol)


-- Actions for the GLR machine

data GLRAction = Shift Int [Reduction]
               | Reduce [Reduction]
               | Accept
               | Error

---
-- A Reduction (s,n,f) removes the top n node-ids, creates a new branch from these
-- and labels the branch with the given symbol s. Additionally, the branch may
-- hold some semantic value.

type Reduction = (GSymbol,Int, [ForestId] -> Branch)


---
-- A Branch holds the semantic result plus node ids of children

data Branch
 = Branch {b_sem :: GSem, b_nodes :: [ForestId]}
   deriving Show

instance Eq Branch where
        b1 == b2 = b_nodes b1 == b_nodes b2



-------------------------------------------------------------------------------
-- Utilities for decoding

---
-- Tree decode unpacks the forest into a list of results
--  - this is ok for small examples, but inefficient for very large examples
--  - the data file contains further instances
--  - see documentation for further information
--  - "Decode_Result" is a synonym used to insert the monad type constr (or not)

class TreeDecode a where
        decode_b :: (ForestId -> [Branch]) -> Branch -> [Decode_Result a]

decode :: TreeDecode a => (ForestId -> [Branch]) -> ForestId -> [Decode_Result a]
decode f i@(_,_,HappyTok t)
  = decode_b f (Branch (SemTok t) [])
decode f i
  = [ d | b <- f i, d <- decode_b f b ]

---- generated by Happy, since it means expansion of synonym (not ok in H-98)
--instance TreeDecode UserDefTok where
--      decode_b f (Branch (SemTok t) []) = [happy_return t]

---
-- this is used to multiply the ambiguous possibilities from children

--cross_fn :: [a -> b] -> [a] -> [b]
--actual type will depend on monad in use.
--happy_ap defined by parser generator
cross_fn fs as = [ f `happy_ap` a | f <- fs, a <- as]

---
-- Label decoding unpacks from the Semantic wrapper type
--  - this allows arbitrary values (within the limits of the compiler settings)
--    to be recovered from nodes in the tree.
--  - again, more instances are written in the data file
--  - see documentation for further information

class LabelDecode a where
        unpack :: GSem -> a

---- generated by Happy, since it means expansion of synonym (not ok in H-98)
--instance LabelDecode UserDefTok where
--      unpack (SemTok t) = t




{-# LINE 104 "src/Data.hs"#-}

parseError :: [Card] -> a
parseError _ = error "Parse error"

{-# LINE 109 "src/Data.hs"#-}

data GSymbol = HappyEOF | HappyTok {-!Int-} (Card) | G_S 
 | G_Pred 
 | G_Noun 
 | G_Adverb 
 | G_Num 
 | G_Exe 
 | G_Op 
 | G_Player 
   deriving (Show,Eq,Ord)

data GSem
 = NoSem
 | SemTok (Card)
 | Sem_0 (MyTree Card -> MyTree Card -> MyTree Card) 
 | Sem_1 (MyTree Card -> MyTree Card -> MyTree Card -> MyTree Card) 
 | Sem_2 (MyTree Card) 
 | Sem_3 (MyTree Card -> MyTree Card) 
 | Sem_4 (MyTree Card -> MyTree Card -> MyTree Card) 
instance Show GSem where
  show Sem_0{} = "Sem_0"
  show Sem_1{} = "Sem_1"
  show Sem_2{} = "Sem_2"
  show Sem_3{} = "Sem_3"
  show Sem_4{} = "Sem_4"


semfn_0_0 ns@(happy_var_1:happy_var_2:happy_rest) =  Branch (Sem_0 (\happy_var_1 -> \happy_var_2 -> Node happy_var_1 [happy_var_2])) ns
semfn_1_0 ns@(happy_var_1:happy_var_2:happy_var_3:happy_rest) =  Branch (Sem_1 (\happy_var_1 -> \happy_var_2 -> \happy_var_3 -> (Node happy_var_1 [happy_var_2, happy_var_3]))) ns
semfn_1_1 ns@(happy_var_1:happy_var_2:happy_var_3:happy_rest) =  Branch (Sem_1 (\happy_var_1 -> \happy_var_2 -> \happy_var_3 -> Node happy_var_2 [happy_var_1, happy_var_3])) ns
semfn_2_0 ns@(happy_rest) =  Branch (Sem_2 ((Leaf Skip))) ns
semfn_2_1 ns@(happy_rest) =  Branch (Sem_2 (Leaf F)) ns
semfn_2_2 ns@(happy_rest) =  Branch (Sem_2 (Leaf X)) ns
semfn_2_3 ns@(happy_rest) =  Branch (Sem_2 (Leaf Adv)) ns
semfn_2_4 ns@(happy_rest) =  Branch (Sem_2 (Leaf One)) ns
semfn_2_5 ns@(happy_rest) =  Branch (Sem_2 (Leaf Two)) ns
semfn_2_6 ns@(happy_rest) =  Branch (Sem_2 (Leaf Trash)) ns
semfn_2_7 ns@(happy_rest) =  Branch (Sem_2 (Leaf Draw)) ns
semfn_2_8 ns@(happy_rest) =  Branch (Sem_2 (Leaf (:+:))) ns
semfn_2_9 ns@(happy_rest) =  Branch (Sem_2 ((Leaf You))) ns
semfn_2_10 ns@(happy_rest) =  Branch (Sem_2 ((Leaf Me))) ns
semfn_3_0 ns@(happy_var_1:happy_var_2:happy_rest) =  Branch (Sem_3 (\happy_var_2 -> Node (Leaf Double) [happy_var_2])) ns
semfn_4_0 ns@(happy_var_1:happy_var_2:happy_var_3:happy_rest) =  Branch (Sem_4 (\happy_var_1 -> \happy_var_3 -> Node (Leaf And) [happy_var_1, happy_var_3])) ns
semfn_4_1 ns@(happy_var_1:happy_var_2:happy_var_3:happy_rest) =  Branch (Sem_4 (\happy_var_1 -> \happy_var_3 -> (Node (Leaf And)[happy_var_1, happy_var_3]))) ns


type Decode_Result a = a
happy_ap = ($)
happy_return = id
instance TreeDecode (MyTree Card) where 
  decode_b f (Branch (Sem_0 s) (b_0:b_1:_)) = (cross_fn (cross_fn [s] $ decode f b_0) $ decode f b_1)
  decode_b f (Branch (Sem_1 s) (b_0:b_1:b_2:_)) = (cross_fn (cross_fn (cross_fn [s] $ decode f b_0) $ decode f b_1) $ decode f b_2)
  decode_b f (Branch (Sem_2 s) (_)) = [s]
  decode_b f (Branch (Sem_3 s) (b_0:b_1:_)) = (cross_fn [s] $ decode f b_1)
  decode_b f (Branch (Sem_4 s) (b_0:b_1:b_2:_)) = (cross_fn (cross_fn [s] $ decode f b_0) $ decode f b_2)



type UserDefTok = Card
instance TreeDecode (Card) where
  decode_b f (Branch (SemTok t) []) = [happy_return t]
instance LabelDecode (Card) where
  unpack (SemTok t) = t


action 0 ( HappyTok (F) ) = Shift 3 []
action 0 ( HappyTok (Trash) ) = Shift 7 []
action 0 ( HappyTok (Adv) ) = Shift 8 []
action 0 ( HappyTok (Draw) ) = Shift 9 []
action 0 ( HappyTok (Skip) ) = Shift 10 []
action 0 ( HappyTok (Double) ) = Shift 11 []
action 1 ( HappyTok (F) ) = Shift 3 []
action 2 ( HappyTok (X) ) = Shift 20 []
action 3 ( HappyTok (X) ) = Reduce [red_7]
action 4 ( HappyTok (And) ) = Shift 18 []
action 4 ( HappyEOF ) = Accept
action 5 ( HappyTok (F) ) = Shift 3 []
action 5 ( HappyTok (Trash) ) = Shift 7 []
action 5 ( HappyTok (Adv) ) = Shift 8 []
action 5 ( HappyTok (Draw) ) = Shift 9 []
action 5 ( HappyTok (Skip) ) = Shift 10 []
action 5 ( HappyTok (Double) ) = Shift 11 []
action 6 ( HappyTok (And) ) = Shift 14 []
action 6 ( HappyTok (Me) ) = Shift 15 []
action 6 ( HappyTok (You) ) = Shift 16 []
action 7 ( HappyTok (And) ) = Reduce [red_13]
action 7 ( HappyTok (Me) ) = Reduce [red_13]
action 7 ( HappyTok (You) ) = Reduce [red_13]
action 8 ( HappyTok (F) ) = Reduce [red_9]
action 8 ( HappyTok (Trash) ) = Reduce [red_9]
action 8 ( HappyTok (Adv) ) = Reduce [red_9]
action 8 ( HappyTok (Draw) ) = Reduce [red_9]
action 8 ( HappyTok (Skip) ) = Reduce [red_9]
action 8 ( HappyTok (Double) ) = Reduce [red_9]
action 9 ( HappyTok (And) ) = Reduce [red_14]
action 9 ( HappyTok (Me) ) = Reduce [red_14]
action 9 ( HappyTok (You) ) = Reduce [red_14]
action 10 ( HappyTok (And) ) = Reduce [red_4]
action 10 ( HappyEOF ) = Reduce [red_4]
action 11 ( HappyTok (F) ) = Shift 3 []
action 11 ( HappyTok (Trash) ) = Shift 7 []
action 11 ( HappyTok (Adv) ) = Shift 8 []
action 11 ( HappyTok (Draw) ) = Shift 9 []
action 11 ( HappyTok (Skip) ) = Shift 10 []
action 11 ( HappyTok (Double) ) = Shift 11 []
action 12 ( HappyTok (And) ) = Shift 18 [red_5]
action 12 ( HappyEOF ) = Reduce [red_5]
action 13 ( HappyTok (One) ) = Shift 24 []
action 13 ( HappyTok (Two) ) = Shift 25 []
action 13 ( HappyTok (And) ) = Shift 26 []
action 14 ( HappyTok (Trash) ) = Shift 7 []
action 14 ( HappyTok (Draw) ) = Shift 9 []
action 15 ( HappyTok (One) ) = Reduce [red_18]
action 15 ( HappyTok (Two) ) = Reduce [red_18]
action 15 ( HappyTok (And) ) = Reduce [red_18]
action 16 ( HappyTok (One) ) = Reduce [red_17]
action 16 ( HappyTok (Two) ) = Reduce [red_17]
action 16 ( HappyTok (And) ) = Reduce [red_17]
action 17 ( HappyTok (And) ) = Shift 18 [red_2]
action 17 ( HappyEOF ) = Reduce [red_2]
action 18 ( HappyTok (F) ) = Shift 3 []
action 18 ( HappyTok (Trash) ) = Shift 7 []
action 18 ( HappyTok (Adv) ) = Shift 8 []
action 18 ( HappyTok (Draw) ) = Shift 9 []
action 18 ( HappyTok (Skip) ) = Shift 10 []
action 18 ( HappyTok (Double) ) = Shift 11 []
action 19 ( HappyTok (And) ) = Reduce [red_1]
action 19 ( HappyEOF ) = Reduce [red_1]
action 20 ( HappyTok (And) ) = Reduce [red_8]
action 20 ( HappyEOF ) = Reduce [red_8]
action 21 ( HappyTok (And) ) = Shift 18 [red_6]
action 21 ( HappyEOF ) = Reduce [red_6]
action 22 ( HappyTok (And) ) = Shift 14 [red_15]
action 22 ( HappyTok (Me) ) = Reduce [red_15]
action 22 ( HappyTok (You) ) = Reduce [red_15]
action 23 ( HappyTok ((:+:)) ) = Shift 29 []
action 23 ( HappyTok (And) ) = Reduce [red_3]
action 23 ( HappyEOF ) = Reduce [red_3]
action 24 ( HappyTok ((:+:)) ) = Reduce [red_10]
action 24 ( HappyTok (And) ) = Reduce [red_10]
action 24 ( HappyEOF ) = Reduce [red_10]
action 25 ( HappyTok ((:+:)) ) = Reduce [red_11]
action 25 ( HappyTok (And) ) = Reduce [red_11]
action 25 ( HappyEOF ) = Reduce [red_11]
action 26 ( HappyTok (Me) ) = Shift 15 []
action 26 ( HappyTok (You) ) = Shift 16 []
action 27 ( HappyTok (One) ) = Reduce [red_19]
action 27 ( HappyTok (Two) ) = Reduce [red_19]
action 27 ( HappyTok (And) ) = Shift 26 [red_19]
action 28 ( HappyTok (One) ) = Shift 24 []
action 28 ( HappyTok (Two) ) = Shift 25 []
action 29 ( HappyTok (One) ) = Reduce [red_16]
action 29 ( HappyTok (Two) ) = Reduce [red_16]
action 30 ( HappyTok ((:+:)) ) = Shift 29 [red_12]
action 30 ( HappyTok (And) ) = Reduce [red_12]
action 30 ( HappyEOF ) = Reduce [red_12]
action _ _ = Error
red_1 = (G_S,2 :: Int,semfn_0_0)
red_2 = (G_S,2 :: Int,semfn_0_0)
red_3 = (G_S,3 :: Int,semfn_1_0)
red_4 = (G_S,1 :: Int,semfn_2_0)
red_5 = (G_S,2 :: Int,semfn_3_0)
red_6 = (G_S,3 :: Int,semfn_4_0)
red_7 = (G_Pred,1 :: Int,semfn_2_1)
red_8 = (G_Noun,1 :: Int,semfn_2_2)
red_9 = (G_Adverb,1 :: Int,semfn_2_3)
red_10 = (G_Num,1 :: Int,semfn_2_4)
red_11 = (G_Num,1 :: Int,semfn_2_5)
red_12 = (G_Num,3 :: Int,semfn_1_1)
red_13 = (G_Exe,1 :: Int,semfn_2_6)
red_14 = (G_Exe,1 :: Int,semfn_2_7)
red_15 = (G_Exe,3 :: Int,semfn_4_0)
red_16 = (G_Op,1 :: Int,semfn_2_8)
red_17 = (G_Player,1 :: Int,semfn_2_9)
red_18 = (G_Player,1 :: Int,semfn_2_10)
red_19 = (G_Player,3 :: Int,semfn_4_1)
goto 0 G_S = 4
goto 0 G_Pred = 2
goto 0 G_Adverb = 5
goto 0 G_Exe = 6

goto 1 G_Pred = 2

goto 2 G_Noun = 19

goto 5 G_S = 17
goto 5 G_Pred = 2
goto 5 G_Adverb = 5
goto 5 G_Exe = 6

goto 6 G_Player = 13

goto 11 G_S = 12
goto 11 G_Pred = 2
goto 11 G_Adverb = 5
goto 11 G_Exe = 6

goto 13 G_Num = 23

goto 14 G_Exe = 22

goto 18 G_S = 21
goto 18 G_Pred = 2
goto 18 G_Adverb = 5
goto 18 G_Exe = 6

goto 23 G_Op = 28

goto 26 G_Player = 27

goto 28 G_Num = 30

goto 30 G_Op = 28

goto _ _ = -1
